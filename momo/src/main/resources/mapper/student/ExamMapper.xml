<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ks52team01.student.exam.mapper.ExamMapper">

	<resultMap type="TookExamInfo" id="TookExamInfoMap">
		<id 	column="took_exam_info_code" property="tookExamInfoCode"/>
		<result column="user_code" 			 property="userCode"/>
		<result column="area_code" 			 property="areaCode"/>
		<result column="area_city_code" 	 property="areaCityCode"/>
		<result column="exam_code" 			 property="examCode"/>
		<result column="kor_slt_sub_mjr" 	 property="korSltSubMjr"/>
		<result column="kor_slt_sub" 		 property="korSltSub"/>
		<result column="math_slt_sub_mjr" 	 property="mathSltSubMjr"/>
		<result column="math_slt_sub" 		 property="mathSltSub"/>
		<result column="inq1_slt_sub_mjr" 	 property="inq1SltSubMjr"/>
		<result column="inq1_slt_sub" 		 property="inq1SltSub"/>
		<result column="inq2_slt_sub_mjr" 	 property="inq2SltSubMjr"/>
		<result column="inq2_slt_sub" 		 property="inq2SltSub"/>
		<result column="eng_slt_sub_mjr" 	 property="engSltSubMjr"/>
		<result column="eng_slt_sub" 		 property="engSltSub"/>
		<result column="kor_his_slt_sub_mjr" property="korHisSltSubMjr"/>
		<result column="kor_his_slt_sub" 	 property="korHisSltSub"/>
		<result column="frn_slt_sub_mjr" 	 property="frnSltSubMjr"/>
		<result column="frn_slt_sub" 		 property="frnSltSub"/>
	
		<association property="examInfo" javaType="ExamInfo">
			<id 	column="exam_code" 	  property="examCode"/>
			<result column="user_code" 	  property="userCode"/>
			<result column="exam_nm" 	  property="examNm"/>
			<result column="exam_type" 	  property="examType"/>
			<result column="exam_oe_type" property="examOEType"/>
			<result column="exam_tar_grd" property="examTarGrd"/>
			<result column="exam_date" 	  property="examDate"/>
			<result column="exam_inst" 	  property="examInst"/>
		</association>
	</resultMap>
	
	<resultMap id="ExamInfoMap" type="ExamInfo">
	    <id column="exam_code" property="examCode"/>
	    <result column="user_code" property="userCode"/>
	    <result column="exam_nm" property="examNm"/>
	    <result column="exam_type" property="examType"/>
	    <result column="exam_oe_type" property="examOEType"/>
	    <result column="exam_tar_grd" property="examTarGrd"/>
	    <result column="exam_date" property="examDate"/>
	    <result column="exam_inst" property="examInst"/>
	    <result column="exam_description" property="examDescription"/>
	    <result column="registeredQuestionCount" property="registeredQuestionCount"/>
	    <result column="user_name" property="userName"/>
	    <result column="user_id" property="userId"/>
	    <result column="examLike" property="examLike"/>
	    <result column="examHate" property="examHate"/>
	</resultMap>
	<resultMap id="ExamMappingQuestionResultMap" type="QnaBank">
	    <id property="ExamMappingQuestionCode" column="exam_mapping_question_code" />
	    <result property="ExamCode" column="exam_code" />
	    <result property="ExamQnaCode" column="exam_qna_code" />
	    <result property="SubMjrCatCode" column="sub_mjr_cat_code" />
	    <result property="SubMirCatNm" column="sub_mir_cat_nm" />
	    <result property="SubMirCatCode" column="sub_mir_cat_code" />
	    <result property="ExamQnaTypeNm" column="exam_qna_type_nm" />
	    <result property="QnaType" column="qna_type" />
	    <result property="ExamQnaChapNm" column="exam_qna_chap_nm" />
	    <result property="QnaChap" column="qna_chap" />
	    <result property="QnaSubject" column="qna_subject" />
	    <result property="QnaQst" column="qna_qst" />
	    <result property="QnaSlt1" column="qna_slt1" />
	    <result property="QnaSlt2" column="qna_slt2" />
	    <result property="QnaSlt3" column="qna_slt3" />
	    <result property="QnaSlt4" column="qna_slt4" />
	    <result property="QnaSlt5" column="qna_slt5" />
	    <result property="QnaAns" column="qna_ans" />
	    <result property="QnaScr" column="qna_scr" />
	    <result property="QnaCmt" column="qna_cmt" />
	    <result property="QnaCreateTime" column="qna_create_time" />
	</resultMap>
	
	<update id="modifyExamRatingToExam" parameterType="String">
		UPDATE exam_rating
		SET
			exam_rating_lh=#{rating}
		WHERE
			exam_code=#{examCode} AND
			user_code=#{userCode}
	</update>
	
	
	<insert id="registerExamRatingToExam" parameterType="String">
		INSERT INTO exam_rating
			(exam_rating_code, exam_code, user_code, exam_rating_lh, exam_rating_reg_date)
		VALUES
			(#{newPk}, #{examCode}, #{userCode}, #{rating}, NOW())
	</insert>
	<select id="searchExamRatingExist" parameterType="String" resultType="Map">
		SELECT
			COUNT(*) as count,
			exam_rating_lh = 1 as examLH
		FROM
			exam_rating
		WHERE
			exam_code=#{examCode} AND
			user_code=#{userCode}
	</select>
	
	
	<insert id="registerResultToSubjectTable" parameterType="ExamSubjectResult">
		<selectKey keyProperty="maxNumber" resultType="Int" order="BEFORE">
			/* 해당테이블에서 pk에서 가장큰 숫자를 알아오는 코드 */
			SELECT
				CASE
				WHEN COUNT(*) = 0 THEN 1
				ELSE
					MAX(CAST(SUBSTRING_INDEX(${pkColumnName}, #{preCode}, -1) AS UNSIGNED))+1
				END AS maxNumber
			FROM
				${tableName};
		</selectKey>
		INSERT INTO ${tableName} 
	    VALUES
		  <foreach collection="qnaCode" item="qna" index="idx" separator=",">
			  
	        (
	            CONCAT(#{preCode}, (#{idx}+#{maxNumber})),
	            #{userCode},
	            (SELECT sub_mjr_cat_code FROM qna_bank WHERE qna_code = #{qna}),
	            (SELECT sub_mir_cat_code FROM qna_bank WHERE qna_code = #{qna}),
	            #{examCode},
	            #{qna},
	            #{userAnswer[${idx}]},
	            (SELECT qna_scr FROM qna_bank WHERE qna_code = #{qna}),
	            NOW(),
	            1
	        )
	    
	    </foreach>
	</insert>
	
	<select id="getQuestionInfoListByExamCode" parameterType="String" resultMap="ExamMappingQuestionResultMap">
	  SELECT
        emq.exam_mapping_question_code,
        emq.exam_code,
        emq.exam_qna_code,
        qb.sub_mjr_cat_code,
        smirc.sub_mir_cat_nm,
        qb.sub_mir_cat_code,
        eqt.exam_qna_type_nm,
        qb.qna_type,
        eqc.exam_qna_chap_nm,
        qb.qna_chap,
        qb.qna_subject,
        qb.qna_qst,
        qb.qna_slt1,
        qb.qna_slt2,
        qb.qna_slt3,
        qb.qna_slt4,
        qb.qna_slt5,
        qb.qna_ans,
        qb.qna_scr,
        qb.qna_cmt,
        qb.qna_create_time
    FROM
        exam_mapping_question emq 
        INNER JOIN qna_bank qb ON emq.exam_qna_code = qb.qna_code
        INNER JOIN sub_mir_cat smirc ON qb.sub_mir_cat_code = smirc.sub_mir_cat_code
        INNER JOIN exam_qna_chap eqc ON qb.qna_chap = eqc.exam_qna_chap_code
        INNER JOIN exam_qna_type eqt ON qb.qna_type = eqt.exam_qna_type_code
    WHERE
        emq.exam_code=#{examCode}
        <if test="currentSubject != null">
            AND qb.sub_mir_cat_code=#{currentSubject}
        </if>
        <if test="currentMjrCode != null">
            AND qb.sub_mjr_cat_code=#{currentMjrCode}
        </if>
    ORDER BY
        CAST(SUBSTRING(exam_mapping_question_code,5) AS UNSIGNED)
	</select>
	
	
	
	<select id="getSearchExamList" parameterType="examInfo" resultMap="ExamInfoMap">
		SELECT
		   ei.exam_code,
		   ei.user_code,
		   ei.exam_nm,
		   ei.exam_type,
		   ei.exam_oe_type,
		   ei.exam_tar_grd,
		   ei.exam_description,
		   ei.exam_date,
		   ei.exam_inst,
		   COUNT(emq.exam_qna_code) AS registeredQuestionCount,
			GROUP_CONCAT(DISTINCT qb.sub_mjr_cat_code ORDER BY qb.sub_mjr_cat_code SEPARATOR ', ') AS newCode,
			(
			 SELECT 
				IFNULL(SUM(CASE WHEN exam_rating_lh = 1 THEN 1 ELSE 0 END), 0)
			 FROM
			 	exam_rating
			 WHERE
			 	exam_code=ei.exam_code
			) AS examLike,
			(
			 SELECT 
				IFNULL(SUM(CASE WHEN exam_rating_lh = 0 THEN 1 ELSE 0 END), 0)
			 FROM
				exam_rating
			 WHERE
			 	exam_code=ei.exam_code
			) AS examHate
			FROM
			   exam_info ei
			   LEFT JOIN exam_mapping_question emq ON ei.exam_code = emq.exam_code
				INNER JOIN qna_bank qb ON emq.exam_qna_code = qb.qna_code
				LEFT JOIN exam_rating er ON ei.exam_code = er.exam_code
		   <!-- GROUP BY 절 -->
			GROUP BY
		      ei.exam_code
		   <!-- HAVING 절에서 조건 처리 -->
		   HAVING
		      registeredQuestionCount > 0
		      AND ei.exam_type != '자체'
	    <!-- beginYear와 endYear 조건 -->
	    <if test="beginYear != null and endYear != null">
	        AND YEAR(ei.exam_date) BETWEEN #{beginYear} AND #{endYear}
	    </if>
	
	    <!-- examType 조건 -->
	    <if test="examType != null and examType != ''">
	        AND ei.exam_type = #{examType}
	    </if>
	
	    <!-- examTarGrd 조건 -->
	    <if test="examTarGrd != null and examTarGrd != ''">
	        AND ei.exam_tar_grd = #{examTarGrd}
	    </if>
	
	    <!-- monthAll이 false일 때만 month 리스트 필터 추가 -->
	    <if test="monthAll == false and month != null and month.size > 0">
	        AND MONTH(ei.exam_date) IN 
	        <foreach collection="month" item="m" open="(" separator="," close=")">
	            #{m}
	        </foreach>
	    </if>
	
	   <!-- subjAll이 false일 때만 subj 리스트 필터 추가(여기 수정해야함) -->
		<if test="subj != null and subj.size > 0">
	
			<foreach collection="subj" item="s">
				AND newCode LIKE concat('%', #{s},'%')
			</foreach>

		</if>
	</select>
	
	<select id="getExamInfoByExamCode" parameterType="String" resultMap="ExamInfoMap">
		SELECT
			ei.exam_code,
			ei.user_code,
			u.user_id,
			u.user_name,
			ei.exam_nm,
			ei.exam_type,
			ei.exam_oe_type,
			ei.exam_tar_grd,
			ei.exam_description,
			ei.exam_date,
			ei.exam_inst
		FROM
			exam_info ei INNER JOIN `user` u ON ei.user_code = u.user_code
		WHERE
			ei.exam_code=#{examCode}
	</select>
	<select id="getExamQuestionInfobyExamCode" parameterType="String" resultType="ExamMappingQuestion">
		SELECT
			qb.sub_mjr_cat_code as subMjrCatCode,
			smirc.sub_mir_cat_nm as subMirCatNm,
			smirc.sub_mir_cat_code as SubMirCatCode
		FROM
			exam_mapping_question emq INNER JOIN qna_bank qb ON emq.exam_qna_code = qb.qna_code
			INNER JOIN sub_mir_cat smirc ON qb.sub_mir_cat_code=smirc.sub_mir_cat_code
		WHERE
			exam_code = #{examCode}
	</select>
	
	<select id="getRegisteredQustionExamList" resultMap="ExamInfoMap">
		SELECT
			ei.exam_code,
			ei.user_code,
			ei.exam_nm,
			ei.exam_type,
			ei.exam_oe_type,
			ei.exam_tar_grd,
			ei.exam_description,
			ei.exam_date,
			ei.exam_inst,
			COUNT(emq.exam_qna_code) AS registeredQuestionCount,
			(SELECT 
				IFNULL(SUM(CASE WHEN exam_rating_lh = 1 THEN 1 ELSE 0 END), 0)
			FROM exam_rating
			WHERE exam_code=ei.exam_code) AS examLike,
			(SELECT 
				IFNULL(SUM(CASE WHEN exam_rating_lh = 0 THEN 1 ELSE 0 END), 0)
			FROM exam_rating
			WHERE exam_code=ei.exam_code) AS examHate
		FROM
			exam_info ei LEFT JOIN exam_mapping_question emq ON ei.exam_code = emq.exam_code
			LEFT JOIN exam_rating er ON ei.exam_code = er.exam_code
		GROUP BY ei.exam_code
		HAVING
			registeredQuestionCount>0 AND
			exam_type != '자체'
	</select>

	<select id="selectUserExamData" resultType="ks52team01.student.exam.dto.ExamAnalyse">
        SELECT
            subject_score_code AS subjectScoreCode,
            user_code AS userCode,
            took_exam_info_code AS tookExamInfoCode,
            sub_mjr_cat_code AS majorCode,
            sub_mir_cat_code AS minorCode,
            subject_score_origin AS subjectScoreOrigin,
            subject_score_reg_time AS scoreRegTime
        FROM
            subject_score
        WHERE
            user_code = #{userCode}  AND sub_mjr_cat_code = #{majorCode}
        ORDER BY
            CAST(SUBSTRING(took_exam_info_code, 5) AS UNSIGNED)
    </select>
	<select id="getTookExamList" parameterType="String" resultMap="TookExamInfoMap">
		SELECT
			tei.took_exam_info_code,
            tei.user_code,
            tei.area_code,
            tei.area_city_code,
            tei.exam_code,
            tei.kor_slt_sub_mjr,
            tei.kor_slt_sub,
            tei.math_slt_sub_mjr,
            tei.math_slt_sub,
            tei.inq1_slt_sub_mjr,
            tei.inq1_slt_sub,
            tei.inq2_slt_sub_mjr,
            tei.inq2_slt_sub,
            tei.eng_slt_sub_mjr,
            tei.eng_slt_sub,
            tei.kor_his_slt_sub_mjr,
            tei.kor_his_slt_sub,
            tei.frn_slt_sub_mjr,
            tei.frn_slt_sub,
            ei.exam_code as ei_exam_code,
            ei.user_code as ei_user_code,
            ei.exam_nm,
            ei.exam_type,
            ei.exam_oe_type,
            ei.exam_tar_grd,
            ei.exam_date,
            ei.exam_inst
		FROM
			took_exam_info tei INNER JOIN exam_info ei
			ON tei.exam_code = ei.exam_code
		WHERE
			tei.user_code = #{userCode}
		ORDER BY
			CAST(SUBSTRING(tei.took_exam_info_code, 5) AS UNSIGNED) DESC;
	</select>
	
	<select id="getFirstTookExamList" parameterType="String" resultMap="TookExamInfoMap">
	/* 회원이 최초로 응시한 모의고사 목록 조회 */
	SELECT
	    tei.took_exam_info_code,
	    tei.user_code,
	    tei.area_code,
	    tei.area_city_code,
	    tei.exam_code,
	    tei.kor_slt_sub_mjr,
	    tei.kor_slt_sub,
	    tei.math_slt_sub_mjr,
	    tei.math_slt_sub,
	    tei.inq1_slt_sub_mjr,
	    tei.inq1_slt_sub,
	    tei.inq2_slt_sub_mjr,
	    tei.inq2_slt_sub,
	    tei.eng_slt_sub_mjr,
	    tei.eng_slt_sub,
	    tei.kor_his_slt_sub_mjr,
	    tei.kor_his_slt_sub,
	    tei.frn_slt_sub_mjr,
	    tei.frn_slt_sub,
	    ei.exam_code,
	    ei.user_code,
	    ei.exam_nm,
	    ei.exam_type,
	    ei.exam_oe_type,
	    ei.exam_tar_grd,
	    ei.exam_date,
	    ei.exam_inst
	FROM
		took_exam_info tei
		INNER JOIN exam_info ei
		ON tei.exam_code = ei.exam_code
		INNER JOIN (
			SELECT
		   		exam_code,
		      	MIN(CAST(SUBSTRING(took_exam_info_code, 5) AS UNSIGNED)) AS first_took_exam_info_code
		   	FROM
		      	took_exam_info
		   	WHERE
		      	user_code = #{userCode}
		   GROUP BY
		      exam_code
		) AS sq
		ON tei.exam_code = sq.exam_code AND CAST(SUBSTRING(tei.took_exam_info_code, 5) AS UNSIGNED) = sq.first_took_exam_info_code
	WHERE
	    tei.user_code = #{userCode}
	ORDER BY
	    CAST(SUBSTRING(tei.took_exam_info_code, 5) AS UNSIGNED) DESC;
	</select>

</mapper>